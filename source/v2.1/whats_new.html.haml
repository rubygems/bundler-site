.container.guide
  %h1
    What's New in
    = current_visible_version

  %p
    This time there was not blog post announcement for the 2.1 release, but as
    always, a detailed list of every change is provided in
    #{link_to "the changelog", "https://github.com/rubygems/bundler/blob/2-1-stable/CHANGELOG.md"}.

  %p
    The main change in bundler 2.1 is that deprecations for upcoming breaking
    changes in bundler 3 will be turned on by default. We do this to grab
    feedback and communicate early to our users the kind of changes we're
    intending to ship with bundler 3, aimed obviously at making the library
    better.

  %p
    If you don't want to deal with deprecations right now and want to toggle
    them off, you can do it through configuration. Set the
    <code>BUNDLE_SILENCE_DEPRECATIONS</code> environment variable to
    <code>true</code>, or configure it through <code>bundle config</code> either
    globally through <code>bundle config set silence_deprecations true</code>
    command, or locally through <code>bundle config set --local
    silence_deprecations true</code>. From now on in this document we will
    assume that all three of these configuration options are available, but will
    only mention <code>bundle config set &lt;option&gt; &lt;value&gt;</code>.

  %p
    As a general note, these changes are intended to improve the experience using
    bundler for <strong>new</strong> users, who have no existing usage routines
    nor possibly biased opinions about how the tool should work based on how it
    has historically worked.  We do understand that changing behaviour that have
    been existing for years can be annoying for old users, that's why we intend
    to make this process as smooth as possible for everyone.

  %p
    I'll be dividing the deprecations into four groups: CLI deprecations, Helper
    deprecations, DSL deprecations, and misc deprecations. Let's dive into each of
    them.


  %h3 CLI deprecations
  .contents
    .bullet
      .description

        %p
          The CLI defines a set of commands and options that can be used by our
          users to create command lines that bundler can understand. There's a
          number of changes in the upcoming 3 version.

        %ul
          %li

            %p
              Flags passed to <code>bundle install</code> that relied on being
              remembered across invocations have been deprecated.

            %p
              In particular, the <code>--clean</code>,
              <code>--deployment</code>, <code>--frozen</code>,
              <code>-no-prune</code>, <code>--path</code>,
              <code>--shebang</code>, <code>--system</code>,
              <code>--without</code>, and <code>--with</code> options to
              <code>bundle install</code>.

            %p
              Remembering CLI options has been a source of historical confusion
              and bug reports, not only for beginners but also for experienced
              users. A CLI tool should not behave differently across exactly the
              same invocations _unless_ explicitly configured to do so. This is
              what configuration is about after all, and things should never be
              silently configured without the user knowing about it.

            %p
              The problem with changing this behavior is that very common
              workflows are relying on it. For example, when you run
              <code>bundle install --without development:test</code> in
              production, those flags are persisted in the app's configuration
              file and further <code>bundle</code> invocations will happily
              ignore development and test gems.  This magic will disappear from
              bundler 3, and you will explicitly need to configure it, either
              through environment variables, application configuration, or
              machine configuration. For example, with <code>bundle config set
              without development test</code>.

            %p
              The removal of this kind of flag also applies to analogous commands,
              for example, to <code>bundle check --path</code>.

          %li

            %p
              The <code>--force</code> flag to <code>bundle install</code> and
              <code>bundle update</code> has been renamed to
              <code>--redownload</code>.

            %p
              This is just a simple rename of the flag, to make more apparent
              what it actually does. This flag forces redownloading every gem,
              it doesn't "force" anything else.

          %li

            %p
              <code>bundle viz</code> will be removed and extracted to a plugin.

            %p
              This is the only bundler command requiring external dependencies,
              both an OS dependency (the <code>graphviz</code> package) and a
              gem dependency (the <code>ruby-graphviz</code> gem). Removing
              these dependencies will make development easier and it was also
              seen by the bundler team as an opportunity to develop a bundler
              plugin that it's officially maintained by the bundler team, and
              that users can take as a reference to develop their own plugins.
              The plugin will contain the same code as the old core command, the
              only difference being that the command is now implemented as
              <code>bundle graph</code> which is much easier to understand.
              However, the details of the plugin are under discussion. See
              [#7041](https://github.com/rubygems/bundler/issues/7041).

          %li

            %p
              The <code>bundle console</code> will be removed and replaced with
              <code>bin/console</code>.

            %p
              Over time we found <code>bundle console</code> hard to maintain
              because every user would want to add her own specific tweaks to
              it. In order to ease maintenance and reduce bikeshedding
              discussions, we're removing the <code>bundle console</code>
              command in favor of a <code>bin/console</code> script created by
              <code>bundle gem</code> on gem generation that users can tweak to
              their needs.

          %li

            %p
              The <code>bundle install</code> command will no longer accept a
              <code>--binstubs</code> flag.

            %p
              The <code>--binstubs</code> option has been removed from
              <code>bundle install</code> and replaced with the <code>bundle
              binstubs</code> command. The <code>--binstubs</code> flag would
              create binstubs for all executables present inside the gems in the
              project. This was hardly useful since most users will only use a
              subset of all the binstubs available to them. Also, it would force
              the introduction of a bunch of most likely unused files into
              source control. Because of this, binstubs now must be created and
              checked into version control individually.

          %li

            %p
              The <code>bundle inject</code> command is deprecated and replaced
              with <code>bundle add</code>.

            %p
              We believe the new command fits the user's mental model better and
              it supports a wider set of use cases. The interface supported by
              <code>bundle inject</code> works exactly the same in <code>bundle
              add</code>, so it should be easy to migrate to the new command.

  %h4 Helper deprecations
  .contents
    .bullet
      .description

        %ul

          %li

            %p
              <code>Bundler.clean_env</code>,
              <code>Bundler.with_clean_env</code>,
              <code>Bundler.clean_system</code>, and
              <code>Bundler.clean_exec</code> are deprecated.

            %p
              All of these helpers ultimately use <code>Bundler.clean_env</code>
              under the hood, which makes sure all bundler-related environment
              are removed inside the block it yields.

            %p
              After quite a lot user reports, we noticed that users don't
              usually want this but instead want the bundler environment as it
              was before the current process was started. Thus,
              <code>Bundler.with_original_env</code>,
              <code>Bundler.original_system</code>, and
              <code>Bundler.original_exec</code> were born.  They all use the
              new <code>Bundler.original_env</code> under the hood.

            %p
              There's however some specific cases where the good old
              <code>Bundler.clean_env</code> behavior can be useful. For
              example, when testing Rails generators, you really want an
              environment where <code>bundler</code> is out of the picture. This
              is why we decided to keep the old behavior under a new more clear
              name, because we figured the word "clean" was too ambiguous. So we
              have introduced <code>Bundler.unbundled_env</code>,
              <code>Bundler.with_unbundled_env</code>,
              <code>Bundler.unbundled_system</code>, and
              <code>Bundler.unbundled_exec</code>.

          %li

            %p
              <code>Bundler.environment</code> is deprecated in favor of
              <code>Bundler.load</code>.

            %p
              We're not sure how people might be using this directly but we have
              removed the <code>Bundler::Environment</code> class which was
              instantiated by <code>Bundler.environment</code> since we realized
              the <code>Bundler::Runtime</code> class was the same thing. During
              the transition <code>Bundler.environment</code> will delegate to
              <code>Bundler.load</code>, which holds the reference to the
              <code>Bundler::Environment</code>.

  %h4 DSL deprecations
  .contents
    .bullet
      .description

        %p

          The following deprecations in bundler's DSL are meant to prepare for
          the strict source pinning in bundler 3, where the source for every
          dependency will be unambiguously defined.

        %ul

          %li

            %p
              Multiple global Gemfile sources will no longer be supported.

            %p
              Instead of something like this:

            :code
              # lang: ruby
              # Gemfile
              source "https://main_source"
              source "https://another_source"

              gem "dependency1"
              gem "dependency2"

            %p
              do something like this:

            :code
              # lang: ruby
              # Gemfile
              source "https://main_source"

              gem "dependency1"

              source "https://another_source" do
                gem "dependency2"
              end

          %li

            %p
              Global `path` and `git` sources will no longer be supported.

            %p
              Instead of something like this:

            :code
              # lang: ruby
              # Gemfile
              path "/my/path/with/gems"
              git "https://my_git_repo_with_gems"

              gem "dependency1"
              gem "dependency2"

            %p
              do something like this:

            :code
              # lang: ruby
              # Gemfile
              gem "dependency1", path: "/my/path/with/gems"
              gem "dependency2", git: "https://my_git_repo_with_gems"

            %p
              or use the block forms if you have multiple gems for each source and
              you want to be a bit DRYer:

            :code
              # lang: ruby
              # Gemfile
              path "/my/path/with/gems" do
                # gem "dependency1"
                # ...
                # gem "dependencyn"
              end

              git "https://my_git_repo_with_gems" do
                # gem "dependency1"
                # ...
                # gem "dependencyn"
              end

  %h4 Misc deprecations
  .contents
    .bullet
      .description

        %ul

          %li

            %p

              Deployment helpers for <code>vlad</code> and
              <code>capistrano</code> are being removed.

            %p
              These are natural deprecations since the <code>vlad</code> tool
              has had no activity for years whereas <code>capistrano</code> 3
              has built-in Bundler integration in the form of the
              `capistrano-bundler` gem, and everyone using Capistrano 3 should
              be already using that instead. If for some reason, you are still
              using Capistrano 2, feel free to copy the Capistrano tasks out of
              the Bundler 2 file <code>lib/bundler/deployment.rb</code> and put
              them into your app.

            %p
              In general, we don't want to maintain integrations for every
              deployment system out there, so that's why we are removing these.
